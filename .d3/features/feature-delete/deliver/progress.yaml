delivery_steps:
  - description: "[code] Add a `DeleteFeature` method to the existing `feature.Service` in `internal/core/feature/feature.go`. This method will take a feature name, locate its directory (e.g., `.d3/features/<feature-name>`), and remove it. It should include comprehensive error handling (e.g., feature not found, permission issues, attempting to delete the active feature if applicable). Write unit tests for this new method."
    type: code
  - description: "[test] Run unit tests for the feature deletion service."
    type: test
  - description: "[code] Implement the CLI command `d3 feature delete <feature-name>`. This command will call the core deletion service. It must include a confirmation prompt (e.g., \"Are you sure you want to delete feature 'X'? This action cannot be undone. [y/N]\"). It should provide clear output on success or failure. Write integration tests for the CLI command."
    type: code
  - description: "[test] Run integration tests for the CLI delete command."
    type: test
  - description: "[code] Implement the MCP tool integration for feature deletion. This will likely involve creating a new `mcp_d3_d3_feature_delete` tool. The MCP tool will invoke the same core deletion service. It must include a confirmation mechanism within the MCP interface. It should provide clear visual feedback in the MCP interface. Write integration tests for the MCP tool."
    type: code
  - description: "[test] Run integration tests for the MCP delete tool."
    type: test
  - description: "[verify] Manually test CLI deletion: Create a dummy feature. Attempt to delete it, confirming the prompt. Verify directory removal. Attempt to delete a non-existent feature. Verify error message. Attempt to cancel deletion at the prompt. Verify no action is taken."
    type: verify
  - description: "[verify] Manually test MCP tool deletion: Create a dummy feature. Attempt to delete it via MCP, confirming the prompt. Verify directory removal. Attempt to delete a non-existent feature via MCP (if applicable). Verify error feedback. Attempt to cancel deletion at the MCP prompt. Verify no action is taken."
    type: verify
  - description: "[commit] Commit all changes related to the feature deletion implementation (core service, CLI, MCP)."
    type: commit
  - description: "[code] Review and update any relevant documentation (e.g., CLI help text, user guides if they exist) to reflect the new feature deletion capability."
    type: code
  - description: "[commit] Commit documentation updates."
    type: commit
modified_files:
  - internal/core/feature/feature.go
  - internal/core/feature/feature_test.go
  - internal/cli/command/feature_delete.go
  - internal/cli/cli.go
  - internal/cli/command/feature_delete_test.go
  - internal/project/project.go
  - internal/project/ports.go
  - internal/mcp/tools/feature.go
  - internal/mcp/tools/register.go
  - internal/mcp/tools/tools_test.go
tasks:
  - description: "Add a `DeleteFeature` method to the existing `feature.Service` in `internal/core/feature/feature.go`. This method will take a feature name, locate its directory (e.g., `.d3/features/<feature-name>`), and remove it. It should include comprehensive error handling (e.g., feature not found, permission issues, attempting to delete the active feature if applicable). Write unit tests for this new method."
    status: complete
  - description: Run unit tests for the feature deletion service.
    status: complete
  - description: "Implement the CLI command `d3 feature delete <feature-name>`. This command will call the core deletion service. It must include a confirmation prompt (e.g., \"Are you sure you want to delete feature 'X'? This action cannot be undone. [y/N]\"). It should provide clear output on success or failure. Write integration tests for the CLI command."
    status: complete
  - description: Run integration tests for the CLI delete command.
    status: complete
  - description: "Implement the MCP tool integration for feature deletion. This will likely involve creating a new `mcp_d3_d3_feature_delete` tool. The MCP tool will invoke the same core deletion service. It must include a confirmation mechanism within the MCP interface. It should provide clear visual feedback in the MCP interface. Write integration tests for the MCP tool."
    status: complete
  - description: Run integration tests for the MCP delete tool.
    status: complete
  - description: "Manually test CLI deletion: Create a dummy feature. Attempt to delete it, confirming the prompt. Verify directory removal. Attempt to delete a non-existent feature. Verify error message. Attempt to cancel deletion at the prompt. Verify no action is taken."
    status: complete
  - description: "Manually test MCP tool deletion: Create a dummy feature. Attempt to delete it via MCP, confirming the prompt. Verify directory removal. Attempt to delete a non-existent feature via MCP (if applicable). Verify error feedback. Attempt to cancel deletion at the MCP prompt. Verify no action is taken."
    status: complete
  - description: "[commit] Commit all changes related to the feature deletion implementation (core service, CLI, MCP)."
    status: complete
  - description: "[code] Review and update any relevant documentation (e.g., CLI help text, user guides if they exist) to reflect the new feature deletion capability."
    status: complete
  - description: "[commit] Commit documentation updates."
    status: complete
