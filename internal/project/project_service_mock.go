// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imcclaskey/d3/internal/project (interfaces: ProjectService)

// Package project is a generated GoMock package.
package project

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	phase "github.com/imcclaskey/d3/internal/core/phase"
)

// MockProjectService is a mock of ProjectService interface.
type MockProjectService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectServiceMockRecorder
}

// MockProjectServiceMockRecorder is the mock recorder for MockProjectService.
type MockProjectServiceMockRecorder struct {
	mock *MockProjectService
}

// NewMockProjectService creates a new mock instance.
func NewMockProjectService(ctrl *gomock.Controller) *MockProjectService {
	mock := &MockProjectService{ctrl: ctrl}
	mock.recorder = &MockProjectServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectService) EXPECT() *MockProjectServiceMockRecorder {
	return m.recorder
}

// ChangePhase mocks base method.
func (m *MockProjectService) ChangePhase(arg0 context.Context, arg1 phase.Phase) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePhase", arg0, arg1)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangePhase indicates an expected call of ChangePhase.
func (mr *MockProjectServiceMockRecorder) ChangePhase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePhase", reflect.TypeOf((*MockProjectService)(nil).ChangePhase), arg0, arg1)
}

// CreateFeature mocks base method.
func (m *MockProjectService) CreateFeature(arg0 context.Context, arg1 string) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", arg0, arg1)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockProjectServiceMockRecorder) CreateFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockProjectService)(nil).CreateFeature), arg0, arg1)
}

// DeleteFeature mocks base method.
func (m *MockProjectService) DeleteFeature(arg0 context.Context, arg1 string) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeature", arg0, arg1)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeature indicates an expected call of DeleteFeature.
func (mr *MockProjectServiceMockRecorder) DeleteFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeature", reflect.TypeOf((*MockProjectService)(nil).DeleteFeature), arg0, arg1)
}

// EnterFeature mocks base method.
func (m *MockProjectService) EnterFeature(arg0 context.Context, arg1 string) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterFeature", arg0, arg1)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnterFeature indicates an expected call of EnterFeature.
func (mr *MockProjectServiceMockRecorder) EnterFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterFeature", reflect.TypeOf((*MockProjectService)(nil).EnterFeature), arg0, arg1)
}

// ExitFeature mocks base method.
func (m *MockProjectService) ExitFeature(arg0 context.Context) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitFeature", arg0)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitFeature indicates an expected call of ExitFeature.
func (mr *MockProjectServiceMockRecorder) ExitFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitFeature", reflect.TypeOf((*MockProjectService)(nil).ExitFeature), arg0)
}

// Init mocks base method.
func (m *MockProjectService) Init(arg0, arg1 bool) (*Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1)
	ret0, _ := ret[0].(*Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init.
func (mr *MockProjectServiceMockRecorder) Init(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockProjectService)(nil).Init), arg0, arg1)
}

// IsInitialized mocks base method.
func (m *MockProjectService) IsInitialized() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsInitialized")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsInitialized indicates an expected call of IsInitialized.
func (mr *MockProjectServiceMockRecorder) IsInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsInitialized", reflect.TypeOf((*MockProjectService)(nil).IsInitialized))
}

// RequiresInitialized mocks base method.
func (m *MockProjectService) RequiresInitialized() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequiresInitialized")
	ret0, _ := ret[0].(error)
	return ret0
}

// RequiresInitialized indicates an expected call of RequiresInitialized.
func (mr *MockProjectServiceMockRecorder) RequiresInitialized() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequiresInitialized", reflect.TypeOf((*MockProjectService)(nil).RequiresInitialized))
}
