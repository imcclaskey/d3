// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imcclaskey/d3/internal/project (interfaces: StorageService,FeatureServicer,RulesServicer,PhaseServicer)

// Package project is a generated GoMock package.
package project

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	feature "github.com/imcclaskey/d3/internal/core/feature"
	session "github.com/imcclaskey/d3/internal/core/session"
)

// MockStorageService is a mock of StorageService interface.
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService.
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance.
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockStorageService) Load() (*session.SessionState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].(*session.SessionState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockStorageServiceMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockStorageService)(nil).Load))
}

// Save mocks base method.
func (m *MockStorageService) Save(arg0 *session.SessionState) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockStorageServiceMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockStorageService)(nil).Save), arg0)
}

// MockFeatureServicer is a mock of FeatureServicer interface.
type MockFeatureServicer struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureServicerMockRecorder
}

// MockFeatureServicerMockRecorder is the mock recorder for MockFeatureServicer.
type MockFeatureServicerMockRecorder struct {
	mock *MockFeatureServicer
}

// NewMockFeatureServicer creates a new mock instance.
func NewMockFeatureServicer(ctrl *gomock.Controller) *MockFeatureServicer {
	mock := &MockFeatureServicer{ctrl: ctrl}
	mock.recorder = &MockFeatureServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureServicer) EXPECT() *MockFeatureServicerMockRecorder {
	return m.recorder
}

// CreateFeature mocks base method.
func (m *MockFeatureServicer) CreateFeature(arg0 context.Context, arg1 string) (*feature.FeatureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", arg0, arg1)
	ret0, _ := ret[0].(*feature.FeatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockFeatureServicerMockRecorder) CreateFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockFeatureServicer)(nil).CreateFeature), arg0, arg1)
}

// GetFeaturePhase mocks base method.
func (m *MockFeatureServicer) GetFeaturePhase(arg0 context.Context, arg1 string) (session.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeaturePhase", arg0, arg1)
	ret0, _ := ret[0].(session.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeaturePhase indicates an expected call of GetFeaturePhase.
func (mr *MockFeatureServicerMockRecorder) GetFeaturePhase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeaturePhase", reflect.TypeOf((*MockFeatureServicer)(nil).GetFeaturePhase), arg0, arg1)
}

// SetFeaturePhase mocks base method.
func (m *MockFeatureServicer) SetFeaturePhase(arg0 context.Context, arg1 string, arg2 session.Phase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFeaturePhase", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFeaturePhase indicates an expected call of SetFeaturePhase.
func (mr *MockFeatureServicerMockRecorder) SetFeaturePhase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeaturePhase", reflect.TypeOf((*MockFeatureServicer)(nil).SetFeaturePhase), arg0, arg1, arg2)
}

// MockRulesServicer is a mock of RulesServicer interface.
type MockRulesServicer struct {
	ctrl     *gomock.Controller
	recorder *MockRulesServicerMockRecorder
}

// MockRulesServicerMockRecorder is the mock recorder for MockRulesServicer.
type MockRulesServicerMockRecorder struct {
	mock *MockRulesServicer
}

// NewMockRulesServicer creates a new mock instance.
func NewMockRulesServicer(ctrl *gomock.Controller) *MockRulesServicer {
	mock := &MockRulesServicer{ctrl: ctrl}
	mock.recorder = &MockRulesServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRulesServicer) EXPECT() *MockRulesServicerMockRecorder {
	return m.recorder
}

// RefreshRules mocks base method.
func (m *MockRulesServicer) RefreshRules(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshRules", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshRules indicates an expected call of RefreshRules.
func (mr *MockRulesServicerMockRecorder) RefreshRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshRules", reflect.TypeOf((*MockRulesServicer)(nil).RefreshRules), arg0, arg1)
}

// MockPhaseServicer is a mock of PhaseServicer interface.
type MockPhaseServicer struct {
	ctrl     *gomock.Controller
	recorder *MockPhaseServicerMockRecorder
}

// MockPhaseServicerMockRecorder is the mock recorder for MockPhaseServicer.
type MockPhaseServicerMockRecorder struct {
	mock *MockPhaseServicer
}

// NewMockPhaseServicer creates a new mock instance.
func NewMockPhaseServicer(ctrl *gomock.Controller) *MockPhaseServicer {
	mock := &MockPhaseServicer{ctrl: ctrl}
	mock.recorder = &MockPhaseServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhaseServicer) EXPECT() *MockPhaseServicerMockRecorder {
	return m.recorder
}

// EnsurePhaseFiles mocks base method.
func (m *MockPhaseServicer) EnsurePhaseFiles(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePhaseFiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsurePhaseFiles indicates an expected call of EnsurePhaseFiles.
func (mr *MockPhaseServicerMockRecorder) EnsurePhaseFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePhaseFiles", reflect.TypeOf((*MockPhaseServicer)(nil).EnsurePhaseFiles), arg0)
}
