// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/imcclaskey/d3/internal/project (interfaces: FeatureServicer,RulesServicer,PhaseServicer,FileOperator)

// Package project is a generated GoMock package.
package project

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	feature "github.com/imcclaskey/d3/internal/core/feature"
	phase "github.com/imcclaskey/d3/internal/core/phase"
	ports "github.com/imcclaskey/d3/internal/core/ports"
)

// MockFeatureServicer is a mock of FeatureServicer interface.
type MockFeatureServicer struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureServicerMockRecorder
}

// MockFeatureServicerMockRecorder is the mock recorder for MockFeatureServicer.
type MockFeatureServicerMockRecorder struct {
	mock *MockFeatureServicer
}

// NewMockFeatureServicer creates a new mock instance.
func NewMockFeatureServicer(ctrl *gomock.Controller) *MockFeatureServicer {
	mock := &MockFeatureServicer{ctrl: ctrl}
	mock.recorder = &MockFeatureServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureServicer) EXPECT() *MockFeatureServicerMockRecorder {
	return m.recorder
}

// ClearActiveFeature mocks base method.
func (m *MockFeatureServicer) ClearActiveFeature() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearActiveFeature")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearActiveFeature indicates an expected call of ClearActiveFeature.
func (mr *MockFeatureServicerMockRecorder) ClearActiveFeature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearActiveFeature", reflect.TypeOf((*MockFeatureServicer)(nil).ClearActiveFeature))
}

// CreateFeature mocks base method.
func (m *MockFeatureServicer) CreateFeature(arg0 context.Context, arg1 string) (*feature.FeatureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFeature", arg0, arg1)
	ret0, _ := ret[0].(*feature.FeatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFeature indicates an expected call of CreateFeature.
func (mr *MockFeatureServicerMockRecorder) CreateFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFeature", reflect.TypeOf((*MockFeatureServicer)(nil).CreateFeature), arg0, arg1)
}

// DeleteFeature mocks base method.
func (m *MockFeatureServicer) DeleteFeature(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFeature", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFeature indicates an expected call of DeleteFeature.
func (mr *MockFeatureServicerMockRecorder) DeleteFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFeature", reflect.TypeOf((*MockFeatureServicer)(nil).DeleteFeature), arg0, arg1)
}

// FeatureExists mocks base method.
func (m *MockFeatureServicer) FeatureExists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FeatureExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// FeatureExists indicates an expected call of FeatureExists.
func (mr *MockFeatureServicerMockRecorder) FeatureExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FeatureExists", reflect.TypeOf((*MockFeatureServicer)(nil).FeatureExists), arg0)
}

// GetActiveFeature mocks base method.
func (m *MockFeatureServicer) GetActiveFeature() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveFeature")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveFeature indicates an expected call of GetActiveFeature.
func (mr *MockFeatureServicerMockRecorder) GetActiveFeature() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveFeature", reflect.TypeOf((*MockFeatureServicer)(nil).GetActiveFeature))
}

// GetFeaturePath mocks base method.
func (m *MockFeatureServicer) GetFeaturePath(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeaturePath", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetFeaturePath indicates an expected call of GetFeaturePath.
func (mr *MockFeatureServicerMockRecorder) GetFeaturePath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeaturePath", reflect.TypeOf((*MockFeatureServicer)(nil).GetFeaturePath), arg0)
}

// GetFeaturePhase mocks base method.
func (m *MockFeatureServicer) GetFeaturePhase(arg0 context.Context, arg1 string) (phase.Phase, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeaturePhase", arg0, arg1)
	ret0, _ := ret[0].(phase.Phase)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeaturePhase indicates an expected call of GetFeaturePhase.
func (mr *MockFeatureServicerMockRecorder) GetFeaturePhase(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeaturePhase", reflect.TypeOf((*MockFeatureServicer)(nil).GetFeaturePhase), arg0, arg1)
}

// ListFeatures mocks base method.
func (m *MockFeatureServicer) ListFeatures(arg0 context.Context) ([]feature.FeatureInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatures", arg0)
	ret0, _ := ret[0].([]feature.FeatureInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeatures indicates an expected call of ListFeatures.
func (mr *MockFeatureServicerMockRecorder) ListFeatures(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockFeatureServicer)(nil).ListFeatures), arg0)
}

// SetActiveFeature mocks base method.
func (m *MockFeatureServicer) SetActiveFeature(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActiveFeature", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActiveFeature indicates an expected call of SetActiveFeature.
func (mr *MockFeatureServicerMockRecorder) SetActiveFeature(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveFeature", reflect.TypeOf((*MockFeatureServicer)(nil).SetActiveFeature), arg0)
}

// SetFeaturePhase mocks base method.
func (m *MockFeatureServicer) SetFeaturePhase(arg0 context.Context, arg1 string, arg2 phase.Phase) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetFeaturePhase", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetFeaturePhase indicates an expected call of SetFeaturePhase.
func (mr *MockFeatureServicerMockRecorder) SetFeaturePhase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetFeaturePhase", reflect.TypeOf((*MockFeatureServicer)(nil).SetFeaturePhase), arg0, arg1, arg2)
}

// MockRulesServicer is a mock of RulesServicer interface.
type MockRulesServicer struct {
	ctrl     *gomock.Controller
	recorder *MockRulesServicerMockRecorder
}

// MockRulesServicerMockRecorder is the mock recorder for MockRulesServicer.
type MockRulesServicerMockRecorder struct {
	mock *MockRulesServicer
}

// NewMockRulesServicer creates a new mock instance.
func NewMockRulesServicer(ctrl *gomock.Controller) *MockRulesServicer {
	mock := &MockRulesServicer{ctrl: ctrl}
	mock.recorder = &MockRulesServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRulesServicer) EXPECT() *MockRulesServicerMockRecorder {
	return m.recorder
}

// ClearGeneratedRules mocks base method.
func (m *MockRulesServicer) ClearGeneratedRules() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearGeneratedRules")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearGeneratedRules indicates an expected call of ClearGeneratedRules.
func (mr *MockRulesServicerMockRecorder) ClearGeneratedRules() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearGeneratedRules", reflect.TypeOf((*MockRulesServicer)(nil).ClearGeneratedRules))
}

// RefreshRules mocks base method.
func (m *MockRulesServicer) RefreshRules(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshRules", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RefreshRules indicates an expected call of RefreshRules.
func (mr *MockRulesServicerMockRecorder) RefreshRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshRules", reflect.TypeOf((*MockRulesServicer)(nil).RefreshRules), arg0, arg1)
}

// MockPhaseServicer is a mock of PhaseServicer interface.
type MockPhaseServicer struct {
	ctrl     *gomock.Controller
	recorder *MockPhaseServicerMockRecorder
}

// MockPhaseServicerMockRecorder is the mock recorder for MockPhaseServicer.
type MockPhaseServicerMockRecorder struct {
	mock *MockPhaseServicer
}

// NewMockPhaseServicer creates a new mock instance.
func NewMockPhaseServicer(ctrl *gomock.Controller) *MockPhaseServicer {
	mock := &MockPhaseServicer{ctrl: ctrl}
	mock.recorder = &MockPhaseServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPhaseServicer) EXPECT() *MockPhaseServicerMockRecorder {
	return m.recorder
}

// EnsurePhaseFiles mocks base method.
func (m *MockPhaseServicer) EnsurePhaseFiles(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsurePhaseFiles", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsurePhaseFiles indicates an expected call of EnsurePhaseFiles.
func (mr *MockPhaseServicerMockRecorder) EnsurePhaseFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsurePhaseFiles", reflect.TypeOf((*MockPhaseServicer)(nil).EnsurePhaseFiles), arg0)
}

// MockFileOperator is a mock of FileOperator interface.
type MockFileOperator struct {
	ctrl     *gomock.Controller
	recorder *MockFileOperatorMockRecorder
}

// MockFileOperatorMockRecorder is the mock recorder for MockFileOperator.
type MockFileOperatorMockRecorder struct {
	mock *MockFileOperator
}

// NewMockFileOperator creates a new mock instance.
func NewMockFileOperator(ctrl *gomock.Controller) *MockFileOperator {
	mock := &MockFileOperator{ctrl: ctrl}
	mock.recorder = &MockFileOperatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileOperator) EXPECT() *MockFileOperatorMockRecorder {
	return m.recorder
}

// EnsureMCPJSON mocks base method.
func (m *MockFileOperator) EnsureMCPJSON(arg0 ports.FileSystem, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureMCPJSON", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureMCPJSON indicates an expected call of EnsureMCPJSON.
func (mr *MockFileOperatorMockRecorder) EnsureMCPJSON(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureMCPJSON", reflect.TypeOf((*MockFileOperator)(nil).EnsureMCPJSON), arg0, arg1)
}

// EnsureProjectFiles mocks base method.
func (m *MockFileOperator) EnsureProjectFiles(arg0 ports.FileSystem, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureProjectFiles", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureProjectFiles indicates an expected call of EnsureProjectFiles.
func (mr *MockFileOperatorMockRecorder) EnsureProjectFiles(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureProjectFiles", reflect.TypeOf((*MockFileOperator)(nil).EnsureProjectFiles), arg0, arg1)
}

// EnsureRootGitignoreEntries mocks base method.
func (m *MockFileOperator) EnsureRootGitignoreEntries(arg0 ports.FileSystem, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureRootGitignoreEntries", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureRootGitignoreEntries indicates an expected call of EnsureRootGitignoreEntries.
func (mr *MockFileOperatorMockRecorder) EnsureRootGitignoreEntries(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureRootGitignoreEntries", reflect.TypeOf((*MockFileOperator)(nil).EnsureRootGitignoreEntries), arg0, arg1)
}
